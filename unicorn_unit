#!/bin/env python3
from os import environ
from sys import path, argv
from random import randint
from time import sleep

env = environ.get
path.append(env("vaava")) # export vaava=/Vaava
from sql.sql_query import psql

# creating separate container that manage any unit

# action 1: getting unit data, 
# action 2: stating that unit is busy, and add container_id
# action 3: exec query that takes att from unit and attack mob
# action 4: if unit survive and mob is dead, generate loot

class auto_unit(psql):
    '''description, how unit is working... ideas only    
    1. script takes all params req to operate, from sql query
    2. each script should depermine free unit to assing himself to, 
    if free unit now exist in db, something wrong with data, or this container shouldn't exist
    3. each unit has assigned "location" and location to look out for,
    in case of moster or container is comster itself attack
    4. unit should play their role assigned in prior by specifications at the start(new) of container
    
    '''
    
    
    def __init__(self) -> None:
        psql.__init__(self)
        
        self.hostname = env('HOSTNAME') # identify container
        if self.hostname == None: self.hostname = "main"
        
        print(self.hostname)
        
        
    def create_unit():
        pass
        
        
        

    # main loop
    # def n1: find free unit to assing to, check sql if unit free
    # def n2: put container id into sql/unit, so manager container can trash this unit if is alive
    # def n3: while look, look out for potential enemy's 
    # def n4: attack if enemy spotted, all actions of attack, going through sql, 
    # taking reference of stats from sql in each operation
    # def n5: 
            
            
        # except Exception as error:
            # print(error.args)
        
    
        
    
    

if __name__ == "__main__":
    b1 = auto_unit()
    # b1.unit()

